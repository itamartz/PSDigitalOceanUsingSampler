#
# Module manifest for module 'PSDigitalOcean'
#
# Generated by: Itamar Tziger
#
# Generated on: 13/07/2025
#

@{

    # Script module or binary module file associated with this manifest.
    RootModule           = 'PSDigitalOcean.psm1'

    # Version number of this module.
    ModuleVersion        = '1.6.0'

    # Supported PSEditions
    # CompatiblePSEditions = @()

    # ID used to uniquely identify this module
    GUID                 = 'f0bbc186-4415-4085-b679-ede20318e7c9'

    # Author of this module
    Author               = 'Itamar Tziger'

    # Company or vendor of this module
    CompanyName          = 'Itamar Tziger'

    # Copyright statement for this module
    Copyright            = '(c) Itamar Tziger. All rights reserved.'

    # Description of the functionality provided by this module
    Description          = 'A comprehensive PowerShell module for managing DigitalOcean resources with enterprise-grade reliability and extensive test coverage (97.51% with 558 tests). Features complete class-based architecture, robust error handling, and full API integration including volume management.'

    # Minimum version of the PowerShell engine required by this module
    PowerShellVersion    = '5.0'

    # Name of the PowerShell host required by this module
    # PowerShellHostName = ''

    # Minimum version of the PowerShell host required by this module
    # PowerShellHostVersion = ''

    # Minimum version of Microsoft .NET Framework required by this module. This prerequisite is valid for the PowerShell Desktop edition only.
    # DotNetFrameworkVersion = ''

    # Minimum version of the common language runtime (CLR) required by this module. This prerequisite is valid for the PowerShell Desktop edition only.
    # ClrVersion = ''

    # Processor architecture (None, X86, Amd64) required by this module
    # ProcessorArchitecture = ''

    # Modules that must be imported into the global environment prior to importing this module
    RequiredModules      = @()

    # Assemblies that must be loaded prior to importing this module
    # RequiredAssemblies = @()

    # Script files (.ps1) that are run in the caller's environment prior to importing this module.
    # ScriptsToProcess = @()

    # Type files (.ps1xml) to be loaded when importing this module
    # TypesToProcess = @()

    # Format files (.ps1xml) to be loaded when importing this module
    # FormatsToProcess = @()

    # Modules to import as nested modules of the module specified in RootModule/ModuleToProcess
    # NestedModules = @()

    # Functions to export from this module, for best performance, do not use wildcards and do not delete the entry, use an empty array if there are no functions to export.
    FunctionsToExport    = @(
        'Add-DigitalOceanAPIToken',
        'Get-DigitalOceanAccount',
        'Get-DigitalOceanImage',
        'Get-DigitalOceanRegion',
        'Get-DigitalOceanSize',
        'Get-DigitalOceanSSHKey',
        'Get-DigitalOceanVolume',
        'Get-DigitalOceanVPC',
        'New-DigitalOceanDroplet',
        'New-DigitalOceanVolume'
    )

    # Cmdlets to export from this module, for best performance, do not use wildcards and do not delete the entry, use an empty array if there are no cmdlets to export.
    CmdletsToExport      = @()

    # Variables to export from this module
    VariablesToExport    = @()

    # Aliases to export from this module, for best performance, do not use wildcards and do not delete the entry, use an empty array if there are no aliases to export.
    AliasesToExport      = @()

    # DSC resources to export from this module
    DscResourcesToExport = @()

    # List of all modules packaged with this module
    # ModuleList = @()

    # List of all files packaged with this module
    # FileList = @()

    # Private data to pass to the module specified in RootModule/ModuleToProcess. This may also contain a PSData hashtable with additional module metadata used by PowerShell.
    PrivateData          = @{

        PSData = @{

            # Tags applied to this module. These help with module discovery in online galleries.
            Tags         = @('PowerShell', 'DigitalOcean', 'API', 'Cloud', 'Management', 'Automation', 'DevOps', 'Infrastructure')

            # A URL to the license for this module.
            LicenseUri   = 'https://github.com/itamartz/PSDigitalOceanUsingSampler/blob/main/LICENSE'

            # A URL to the main website for this project.
            ProjectUri   = 'https://github.com/itamartz/PSDigitalOceanUsingSampler'

            # A URL to an icon representing this module.
            # IconUri = 'https://github.com/itamartz/PSDigitalOceanUsingSampler/raw/main/icon.png'

            # ReleaseNotes of this module
            ReleaseNotes = @'
## v1.6.0 - Latest Release

### Added
- New-DigitalOceanVolume function for creating DigitalOcean Block Storage volumes
- Support for ext4 and xfs filesystem types with proper validation
- Volume size support from 1GB to 16TB with comprehensive parameter validation
- Enhanced Get-DigitalOceanVolume test coverage with comprehensive error handling
- 32 new test cases covering error scenarios and edge cases
- Comprehensive wiki documentation for New-DigitalOceanVolume

### Changed
- Improved Get-DigitalOceanVolume coverage from 83.13% to 97.51%
- Enhanced error handling across volume management functions
- Updated module statistics: 97.51% coverage with 558 tests
- Expanded test suite with robust error scenario validation
- Updated documentation with v1.6.0 features and examples

### Quality Improvements
- Enterprise-grade reliability with 97.51% test coverage maintained
- 558 total tests (549 passed, 0 failed, 9 skipped)
- Full PSScriptAnalyzer compliance across all new functions
- Comprehensive parameter validation and error handling
- PowerShell 5.1 compatibility validated

### Features
- Complete PowerShell module for DigitalOcean API integration
- Full class-based architecture with Account, Team, Image, Region, Size, SSH Key, VPC, Volume, and Droplet objects
- Comprehensive error handling and defensive programming
- Support for pagination and bulk operations
- Professional documentation and examples
- Block Storage volume management with filesystem support

### Functions
- Add-DigitalOceanAPIToken: Securely set your DigitalOcean API token
- Get-DigitalOceanAccount: Retrieve account information with pagination support
- Get-DigitalOceanImage: Retrieve DigitalOcean images with filtering and pagination support
- Get-DigitalOceanRegion: Retrieve available DigitalOcean regions
- Get-DigitalOceanSize: Retrieve available DigitalOcean droplet sizes
- Get-DigitalOceanSSHKey: Retrieve SSH keys from your account
- Get-DigitalOceanVolume: Retrieve Block Storage volumes with comprehensive filtering
- Get-DigitalOceanVPC: Retrieve Virtual Private Cloud information
- New-DigitalOceanDroplet: Create new DigitalOcean droplets
- New-DigitalOceanVolume: Create Block Storage volumes with filesystem support

## v1.5.0 - Previous Release

### Added
- Get-DigitalOceanVolume function for volume management
- DigitalOceanVolume PowerShell class with comprehensive property structure
- Enhanced volume retrieval with ID, name, and region-based filtering
- 46 new test cases for volume functionality

## v1.4.0 - Earlier Release

### Added
- Comprehensive edge case testing for all PowerShell classes
- Complete constructor coverage for complex object initialization logic
- 77 new test cases covering previously uncovered code paths
- Enhanced error handling and null value scenarios
'@
            # Prerelease string of this module
            Prerelease   = ''

            # Flag to indicate whether the module requires explicit user acceptance for install/update/save
            # RequireLicenseAcceptance = $false

            # External dependent modules of this module
            # ExternalModuleDependencies = @()

        } # End of PSData hashtable

    } # End of PrivateData hashtable

    # HelpInfo URI of this module
    # HelpInfoURI = ''

    # Default prefix for commands exported from this module. Override the default prefix using Import-Module -Prefix.
    # DefaultCommandPrefix = ''

}
